Java Characteristics

1. Blocos de código
   - Blocos de código são definidos por chaves { }.

2. Controle de Fluxo:
   - Exemplo de uso de if e else:
     if (a > 0) {
         System.out.println("O valor de a é positivo");
     } else {
         System.out.println("O valor de a é negativo ou zero");
     }

3. Tratamento de Exceções:
   - Exemplo de uso de try-catch:
     try {
         int[] numbers = {1, 2, 3};
         System.out.println(numbers[5]); // Isso vai gerar um erro
     } catch (ArrayIndexOutOfBoundsException e) {
         System.out.println("Erro: Índice fora do limite do array");
     }

4. Comentários:
   - Comentário de uma linha: // Este é um comentário
   - Comentário de múltiplas linhas:
     /* Este é um comentário
        de múltiplas linhas. */

5. Case Sensitive:
   - Java diferencia letras maiúsculas de minúsculas.
     Exemplo:
     String texto = "Java"; // correto
     // string texto = "Java"; // erro de compilação

6. Estrutura de Programa:
   - Java é estruturado em classes e métodos. O ponto de entrada principal é o método main.

7. Tipagem Estática:
   - Em Java, o tipo da variável é definido no momento da declaração.
   Exemplo:
   int numero = 10;

8. Tipos de Dados:
   - Números Inteiros:
     byte b = 1;
     short s = 100;
     int i = 1000;
     long l = 10000L;

   - Números Reais:
     float f = 10.5f; // float vai até 7 casas decimais
     double d = 10.555555555555; // double tem mais precisão que o float

   - Lógicos:
     char c = 'A';
     boolean isJavaFun = true;

9. Vetores (Arrays):
   - Declaração e inicialização de arrays:
     int[] numbers = {1, 2, 3, 4, 5};

10. Matrizes:
   - Matrizes bidimensionais:
     int[][] matrix = {
         {1, 2, 3},
         {4, 5, 6},
         {7, 8, 9}
     };

11. Estruturas de Dados:
   - Listas:
     java.util.List<Integer> list = new java.util.ArrayList<>();
     list.add(10);
     list.add(20);

   - Pilhas (Stack):
     java.util.Stack<Integer> stack = new java.util.Stack<>();
     stack.push(1);
     stack.push(2);

   - Filas (Queue):
     java.util.Queue<Integer> queue = new java.util.LinkedList<>();
     queue.add(10);
     queue.add(20);

   - Conjuntos (Set):
     java.util.HashSet<Integer> hashSet = new java.util.HashSet<>();
     hashSet.add(10);
     hashSet.add(20);

   - Mapas (Map):
     java.util.Map<String, Integer> map = new java.util.HashMap<>();
     map.put("Chave1", 100);
     map.put("Chave2", 200);

12. Operadores de Atribuição:
   - Atribuição simples:
     int x = 1;
   - Atribuição composta:
     x += 2; // x = x + 2
     x -= 1; // x = x - 1
     x *= 2; // x = x * 2
     x /= 2; // x = x / 2

13. Operadores Aritméticos:
   - Adição: +
   - Subtração: -
   - Multiplicação: *
   - Divisão: /
   - Exponencial (não nativo em Java): Math.pow(a1, b1)
   - Módulo: %
   - Incremento: ++
   - Decremento: --

14. Tabela Verdade:
   - Operadores lógicos:
     AND: &&
     OR: ||

   - Exemplo de Tabela Verdade:
     P | Q | P AND Q
     V   V   V
     V   F   F
     F   V   F

     P | Q | P OR Q
     V   V   V
     F   V   V
     V   F   V
     F   F   F

15. Operadores Lógicos:
   - AND: &&
   - OR: ||
   - NOT: !

16. Operador Ternário:
   - Compacta um if/else:
     resultado = (condição) ? valorSeVerdadeiro : valorSeFalso;
     Exemplo:
     int idade = 20;
     String resultado = (idade >= 18) ? "Maior de idade" : "Menor de idade";



Fundamentos de Entrada e Saída (Igual a porta, entra e sai!)
Os fundamentos de entrada e saída de dados em Java envolvem a leitura de dados fornecidos pelo usuário
e a escrita de dados para a saída.

Para ler dados do usuário ou dispositivos.
Saída de Dados
Manipulação de Arquivos (API)
    Para ler e escrever arquivos no sistema operacional ou navegador.

Ler dados do console
    Biblioteca Scanner

Método efiente para ler texto do console ou de arquivos
    BufferedReader

Fluxo de saída padrão usado para imprimir dados no console
    System.out.print("Hello, world!");

Entrada e saída de dados em Java cobrem uma ampla gama de operações, desde a leitura e escrita de dados
simples no console.

Scanner + System = Leitura e escrita de dados! (Mais simples e pratico!)


Manipulação de arquivos
Para ler e escrever arquivos, podemos usar varias classes do pacote java.Isso
  FileReader - Leitor ou leitura
  FileWriter - escrita
  BufferedReader - Leitor ou leitura
  BufferedWriter - escrita

Estrutura Condicionais
Permitem a execução de diferentes blocos de código com base em condições especificas
  if 
  if-else
  if-else aninhado
    else
      if


Estrutura de Seleção (Controle remoto)
A estrutura switch é usada para selecionar um blodo de código a ser executado com base no valor de uma variavel.
switch (variavel) {
  case 1;
  case 2;
  ...
  case n;
}
Se for dois tipos de teste usa if else
Se for tres tipos de teste usa if else-if else
Se for quatro ou mais usa switch

Instruções de repetição
Instruções são usada para executar um blodo de codigo varias cezes com base em uma determinada condição
  for 
    Percorrer um caminho - inicio, movimentação e condição de parada.
  while
    Enquanto essa condição for verdadeira faça esse bloco de codigo - não pode entrar em Loop, precisa ter uma condição de parada
  do-while
    Faça enquanto o enquanto for verdadeiro, vai fazer pelo menos uma vez.


Manipulação de Vetores
Vetores ou Arrays são estruturas de dados que armazenam elementos de um mesmo tipo, permitindo o acesso aos elementos por meio de indices

int [] numeros = {1, 2, 3, 4};


Manipulação de Matrizes
Matrizes são uma extensão dos vetores, uma matriz basicamento é um vertor de vetores

int[][] = {
  {1, 2, 3},
  {4, 5, 6},
  {7, 8, 9}
};


Instruções de controle de repetição
break - encerrar imediatamente o bloco de codigo
continue - codigo seja executado apartir do momento que for declarada

Sintaxe Basica das Funções
Funções são blocos de código que realizam tarefas especificas e pomde ser reutilizadas em diferentes partes do Programa
  Funções tambem são chamadas métodos, a sintaxe inclui modificador de acesso, tipo de retorno, nome do metodo e lista de parametros(opcionais).

    public tipoRetorno
    nomeFuncao(parametros) {
      // Bloco de código
    }


Procedimentos e Funções
Função: Método que retorna um valor.
  int soma (int a, int b) {
    return a+b;
  }

Procedimento: Método que não retorna um valor (void)
  void imprimir(String msg) {
    System.out.println(msg);
  }


Passagem de parâmetros
  Passagem de valor
    Os parametros passados para a função são do tipo primitivo.
      public soma(int a, int b) {};

  Passagem por referencia
    O parametro passado é a referencia de um objeto, e a função pode alterar valores livremente